(*
  point.ml
  Copyright (c) 2012 - by Masaki Watanabe
  License: see LICENSE
*)

let max_col = 11
;;

let max_row = 12
;;

let of_child_chonbo = 8000
;;

let of_parent_chonbo = 12000
;;

let tumifu_unit = 300
;;

let child_ron = [|
  (** 1 han *)
  [|0;     0; 1000;  1300;  1600;  2000;  2300;  2600;  2900;  3200;  3600|];

  (** 2 han *)
  [|0;  1600; 2000;  2600;  3200;  3900;  4500;  5200;  5800;  6400;  7100|];

  (** 3 han *)
  [|0;  3200; 3900;  5200;  6400;  7700;  8000;  8000;  8000;  8000;  8000|];

  (** 4 han *)
  [|0;  6400; 7700;  8000;  8000;  8000;  8000;  8000;  8000;  8000;  8000|];

  (** 5 han *)
  [|0;  8000; 8000;  8000;  8000;  8000;  8000;  8000;  8000;  8000;  8000|];

  (** 6, 7 han *)
  [|12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000|];
  [|12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000|];

  (** 8, 9, 10 han *)
  [|16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000|];
  [|16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000|];
  [|16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000|];

  (** 11, 12 han *)
  [|24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000|];
  [|24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000|];

  (** 13 han - *)
  [|32000; 32000; 32000; 32000; 32000; 32000; 32000; 32000; 32000; 32000; 32000|];
|]
;;

let child_tumo = [|
  (** 1 han *)
  [|(0, 0); (0, 0); (300, 500); (400, 700); (400, 800); (500, 1000); (600, 1200); (700, 1300); (800, 1500); (800, 1600); (900, 1800)|];

  (** 2 han *)
  [|(400, 700); (0, 0); (500, 1000); (700, 1300); (800, 1600); (1000, 2000); (1200, 2300); (1300, 2600); (1500, 2900); (1600, 3200); (1800, 3600)|];

  (** 3 han *)
  [|(700, 1300); (800, 1600); (1000, 2000); (1300, 2600); (1600, 3200); (2000, 3900); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000)|];

  (** 4 han *)
  [|(1300, 2600); (1600, 3200); (2000, 3900); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000)|];

  (** 5 han *)
  [|(2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000); (2000, 4000)|];

  (** 6, 7 han *)
  [|(3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000)|];
  [|(3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000); (3000, 6000)|];

  (** 8, 9, 10 han *)
  [|(4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000)|];
  [|(4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000)|];
  [|(4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000); (4000, 8000)|];

  (** 11, 12 han *)
  [|(6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000)|];
  [|(6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000); (6000, 12000)|];

  (** 13 han - *)
  [|(8000, 16000); (8000, 16000); (8000, 16000); (8000, 16000); (8000, 16000); (8000, 16000); (8000, 16000); (8000, 16000); (8000, 16000); (8000, 16000); (8000, 16000)|]
|]
;;

let parent_ron = [|
  (** 1 han *)
  [|0; 0; 1500; 2000; 2400; 2900; 3400; 3900; 4400; 4800; 5300|];

  (** 2 han *)
  [|0; 2400; 2900; 3900; 4800; 5800; 6800; 7700; 8700; 9600; 10600|];

  (** 3 han *)
  [|0; 4800; 5800; 7700; 9600; 11600; 12000; 12000; 12000; 12000; 12000|];

  (** 4 han *)
  [|0; 9600; 11600; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000|];

  (** 5 han *)
  [|12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000|];

  (** 6, 7 han *)
  [|18000; 18000; 18000; 18000; 18000; 18000; 18000; 18000; 18000; 18000; 18000|];
  [|18000; 18000; 18000; 18000; 18000; 18000; 18000; 18000; 18000; 18000; 18000|];

  (** 8, 9, 10 han *)
  [|24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000|];
  [|24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000|];
  [|24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000; 24000|];

  (** 11, 12 han *)
  [|36000; 36000; 36000; 36000; 36000; 36000; 36000; 36000; 36000; 36000; 36000|];
  [|36000; 36000; 36000; 36000; 36000; 36000; 36000; 36000; 36000; 36000; 36000|];

  (** 13 han - *)
  [|48000; 48000; 48000; 48000; 48000; 48000; 48000; 48000; 48000; 48000; 48000|]
|]
;;

let parent_tumo = [|
  (** 1 han *)
  [|0; 0; 500; 700; 800; 1000; 1200; 1300; 1500; 1600|];

  (** 2 han *)
  [|700; 0; 1000; 1300; 1600; 2000; 2300; 2600; 2900; 3200; 3600|];

  (** 3 han *)
  [|1300; 1600; 2000; 2600; 3200; 3900; 4000; 4000; 4000; 4000; 4000|];

  (** 4 han *)
  [|2600; 3200; 3900; 4000; 4000; 4000; 4000; 4000; 4000; 4000; 4000|];

  (** 5 han *)
  [|4000; 4000; 4000; 4000; 4000; 4000; 4000; 4000; 4000; 4000; 4000|];

  (** 6, 7 han *)
  [|6000; 6000; 6000; 6000; 6000; 6000; 6000; 6000; 6000; 6000; 6000|];
  [|6000; 6000; 6000; 6000; 6000; 6000; 6000; 6000; 6000; 6000|];

  (** 8, 9, 10 han *)
  [|8000; 8000; 8000; 8000; 8000; 8000; 8000; 8000; 8000; 8000; 8000|];
  [|8000; 8000; 8000; 8000; 8000; 8000; 8000; 8000; 8000; 8000; 8000|];
  [|8000; 8000; 8000; 8000; 8000; 8000; 8000; 8000; 8000; 8000; 8000|];

  (** 11, 12 han *)
  [|12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000|];
  [|12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000; 12000|];

  (** 13 han - *)
  [|16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000; 16000|];
|]
;;

let point_index_of ~yaku_count ~fu_count =
  let row y = min (max 0 (y - 1)) max_row in
  let col f = min (max 0 ((f - 20) / 10)) max_col in
  match yaku_count, fu_count with
    | yaku_count, 20 -> (row yaku_count, col fu_count)
    | yaku_count, 25 -> (row yaku_count, 1)
    | _ -> (row yaku_count, min (col fu_count + 1) max_col)
;;

let of_child_ron ~yaku_count ~fu_count =
  let (row, col) = point_index_of ~yaku_count ~fu_count in
  child_ron.(row).(col)
;;

let of_parent_ron ~yaku_count ~fu_count =
  let (row, col) = point_index_of ~yaku_count ~fu_count in
  parent_ron.(row).(col)
;;

let of_child_tumo ~yaku_count ~fu_count =
  let (row, col) = point_index_of ~yaku_count ~fu_count in
  child_tumo.(row).(col)
;;

let of_parent_tumo ~yaku_count ~fu_count =
  let (row, col) = point_index_of ~yaku_count ~fu_count in
  parent_tumo.(row).(col)
;;

let of_tumifu_many ?(player_count=4) honba =
  let other_player_count = max (player_count - 1) 1 in
  (tumifu_unit / other_player_count) * honba
;;

let of_tumifu_single honba =
  tumifu_unit * honba
;;

